// Code generated by MockGen. DO NOT EDIT.
// Source: D:/goworkspace/src/parser/parser/parserproto/parser.pb.go

// Package parsermock is a generated GoMock package.
package parsermock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	parserproto "parser/parser/parserproto"
	reflect "reflect"
)

// MockParserServiceClient is a mock of ParserServiceClient interface
type MockParserServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockParserServiceClientMockRecorder
}

// MockParserServiceClientMockRecorder is the mock recorder for MockParserServiceClient
type MockParserServiceClientMockRecorder struct {
	mock *MockParserServiceClient
}

// NewMockParserServiceClient creates a new mock instance
func NewMockParserServiceClient(ctrl *gomock.Controller) *MockParserServiceClient {
	mock := &MockParserServiceClient{ctrl: ctrl}
	mock.recorder = &MockParserServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParserServiceClient) EXPECT() *MockParserServiceClientMockRecorder {
	return m.recorder
}

// Parse mocks base method
func (m *MockParserServiceClient) Parse(ctx context.Context, in *parserproto.ParserRequest, opts ...grpc.CallOption) (*parserproto.ParserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Parse", varargs...)
	ret0, _ := ret[0].(*parserproto.ParserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockParserServiceClientMockRecorder) Parse(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParserServiceClient)(nil).Parse), varargs...)
}

// MockParserServiceServer is a mock of ParserServiceServer interface
type MockParserServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockParserServiceServerMockRecorder
}

// MockParserServiceServerMockRecorder is the mock recorder for MockParserServiceServer
type MockParserServiceServerMockRecorder struct {
	mock *MockParserServiceServer
}

// NewMockParserServiceServer creates a new mock instance
func NewMockParserServiceServer(ctrl *gomock.Controller) *MockParserServiceServer {
	mock := &MockParserServiceServer{ctrl: ctrl}
	mock.recorder = &MockParserServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParserServiceServer) EXPECT() *MockParserServiceServerMockRecorder {
	return m.recorder
}

// Parse mocks base method
func (m *MockParserServiceServer) Parse(arg0 context.Context, arg1 *parserproto.ParserRequest) (*parserproto.ParserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0, arg1)
	ret0, _ := ret[0].(*parserproto.ParserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockParserServiceServerMockRecorder) Parse(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParserServiceServer)(nil).Parse), arg0, arg1)
}
