// Code generated by protoc-gen-go. DO NOT EDIT.
// source: parser.proto

package parser

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the url.
type ParserRequest struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParserRequest) Reset()         { *m = ParserRequest{} }
func (m *ParserRequest) String() string { return proto.CompactTextString(m) }
func (*ParserRequest) ProtoMessage()    {}
func (*ParserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_128ea0fcf29414eb, []int{0}
}

func (m *ParserRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParserRequest.Unmarshal(m, b)
}
func (m *ParserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParserRequest.Marshal(b, m, deterministic)
}
func (m *ParserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParserRequest.Merge(m, src)
}
func (m *ParserRequest) XXX_Size() int {
	return xxx_messageInfo_ParserRequest.Size(m)
}
func (m *ParserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParserRequest proto.InternalMessageInfo

func (m *ParserRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// The response message containing the url's title, body and links of thumbnails.
type ParserResponse struct {
	Title                string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Thumbnail            string   `protobuf:"bytes,2,opt,name=thumbnail,proto3" json:"thumbnail,omitempty"`
	Body                 string   `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParserResponse) Reset()         { *m = ParserResponse{} }
func (m *ParserResponse) String() string { return proto.CompactTextString(m) }
func (*ParserResponse) ProtoMessage()    {}
func (*ParserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_128ea0fcf29414eb, []int{1}
}

func (m *ParserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParserResponse.Unmarshal(m, b)
}
func (m *ParserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParserResponse.Marshal(b, m, deterministic)
}
func (m *ParserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParserResponse.Merge(m, src)
}
func (m *ParserResponse) XXX_Size() int {
	return xxx_messageInfo_ParserResponse.Size(m)
}
func (m *ParserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParserResponse proto.InternalMessageInfo

func (m *ParserResponse) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ParserResponse) GetThumbnail() string {
	if m != nil {
		return m.Thumbnail
	}
	return ""
}

func (m *ParserResponse) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*ParserRequest)(nil), "parser.ParserRequest")
	proto.RegisterType((*ParserResponse)(nil), "parser.ParserResponse")
}

func init() { proto.RegisterFile("parser.proto", fileDescriptor_128ea0fcf29414eb) }

var fileDescriptor_128ea0fcf29414eb = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x48, 0x2c, 0x2a,
	0x4e, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x14, 0xb9, 0x78,
	0x03, 0xc0, 0xac, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x21, 0x01, 0x2e, 0xe6, 0xd2, 0xa2,
	0x1c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x10, 0x53, 0x29, 0x82, 0x8b, 0x0f, 0xa6, 0xa4,
	0xb8, 0x20, 0x3f, 0xaf, 0x38, 0x55, 0x48, 0x84, 0x8b, 0xb5, 0x24, 0xb3, 0x24, 0x27, 0x15, 0xaa,
	0x0a, 0xc2, 0x11, 0x92, 0xe1, 0xe2, 0x2c, 0xc9, 0x28, 0xcd, 0x4d, 0xca, 0x4b, 0xcc, 0xcc, 0x91,
	0x60, 0x02, 0xcb, 0x20, 0x04, 0x84, 0x84, 0xb8, 0x58, 0x92, 0xf2, 0x53, 0x2a, 0x25, 0x98, 0xc1,
	0x12, 0x60, 0xb6, 0x91, 0x3b, 0xcc, 0xf2, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x33,
	0x2e, 0x56, 0xb0, 0x80, 0x90, 0xa8, 0x1e, 0xd4, 0xb5, 0x28, 0x8e, 0x93, 0x12, 0x43, 0x17, 0x86,
	0x38, 0x28, 0x89, 0x0d, 0xec, 0x29, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x13, 0x8e,
	0xa7, 0xe4, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ParserServiceClient is the client API for ParserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ParserServiceClient interface {
	Parse(ctx context.Context, in *ParserRequest, opts ...grpc.CallOption) (*ParserResponse, error)
}

type parserServiceClient struct {
	cc *grpc.ClientConn
}

func NewParserServiceClient(cc *grpc.ClientConn) ParserServiceClient {
	return &parserServiceClient{cc}
}

func (c *parserServiceClient) Parse(ctx context.Context, in *ParserRequest, opts ...grpc.CallOption) (*ParserResponse, error) {
	out := new(ParserResponse)
	err := c.cc.Invoke(ctx, "/parser.ParserService/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParserServiceServer is the server API for ParserService service.
type ParserServiceServer interface {
	Parse(context.Context, *ParserRequest) (*ParserResponse, error)
}

func RegisterParserServiceServer(s *grpc.Server, srv ParserServiceServer) {
	s.RegisterService(&_ParserService_serviceDesc, srv)
}

func _ParserService_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserServiceServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/parser.ParserService/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserServiceServer).Parse(ctx, req.(*ParserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ParserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "parser.ParserService",
	HandlerType: (*ParserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _ParserService_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "parser.proto",
}
